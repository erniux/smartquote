# =======================================================
# 🚀 Django CI Workflow
# Ejecuta validaciones automáticas del backend (Django)
# en cualquier rama o manualmente desde GitHub.
# =======================================================

name: 🦎 Django CI

on:
  push:
    branches:
      - "**"                # Ejecutar en cualquier rama
  pull_request:
    branches:
      - "**"                # Ejecutar también en cualquier PR
  workflow_dispatch:         # Permitir ejecución manual

jobs:
  build:
    runs-on: ubuntu-latest

    # ==============================
    # 🔐 Variables y Secrets
    # ==============================
    env:
      DATABASE_NAME: smartquote
      DATABASE_USER: mi_usuario
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      ALLOWED_HOSTS: localhost,127.0.0.1
      DJANGO_SETTINGS_MODULE: smartquote.settings
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

      DJANGO_SUPERUSER_USERNAME: admin
      DJANGO_SUPERUSER_EMAIL: admin@example.com
      DJANGO_SUPERUSER_PASSWORD: admin123
      DJANGO_SUPERUSER_ROLE: admin

    # ==============================
    # 📦 Servicios requeridos
    # ==============================
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: smartquote
          POSTGRES_USER: mi_usuario
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        options: >-
          --health-cmd="pg_isready -U mi_usuario -d smartquote"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    # ==============================
    # ⚙️ Pasos del pipeline
    # ==============================
    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Compose
        run: |
          sudo apt-get update && sudo apt-get install -y docker-compose

      - name: 🧱 Build containers
        run: docker compose build

      - name: ✅ Run Django system check
        run: docker compose run --rm backend python manage.py check

      - name: 🗃️ Run migrations
        run: docker compose run --rm backend python manage.py migrate --noinput

      - name: 🧪 Run tests
        run: docker compose run --rm backend python manage.py test --noinput

